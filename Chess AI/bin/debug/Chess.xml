<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Chess</name>
    </assembly>
    <members>
        <member name="T:Chess.AI">
            <summary>
            main function AI evalution
            </summary>
        </member>
        <member name="F:Chess.AI.DEPTH">
            <summary>
             search depth
            </summary>
        </member>
        <member name="F:Chess.AI.piecePawnValue">
            <summary>
            piece value for AI evaluation
            </summary>        
        </member>
        <member name="F:Chess.AI.pieceKnightValue">
            <summary>
            piece value for AI evaluation
            </summary>        
        </member>
        <member name="F:Chess.AI.pieceBishopValue">
            <summary>
            piece value for AI evaluation
            </summary>        
        </member>
        <member name="F:Chess.AI.pieceRookValue">
            <summary>
            piece value for AI evaluation
            </summary>        
        </member>
        <member name="F:Chess.AI.pieceQueenValue">
            <summary>
            piece value for AI evaluation
            </summary>        
        </member>
        <member name="F:Chess.AI.pieceKingValue">
            <summary>
            piece value for AI evaluation
            </summary>        
        </member>
        <member name="F:Chess.AI.RUNNING">
            <summary>
            isAIRuning:true/false
            </summary>
        </member>
        <member name="F:Chess.AI.STOP">
            <summary>
            isStop
            </summary>        
        </member>
        <member name="M:Chess.AI.Evaluation(Chess.ChessBoard,Chess.Player)">
            <summary>
            Calculate and return the boards Evaluation value.
            </summary>
            <param name="board">current ChessBoard state</param>
            <param name="turn">"Who's side are we viewing from."></param>
            <returns>The board evaluation, what else?</returns>
        </member>
        <member name="M:Chess.AI.GetBestMove(Chess.ChessBoard,Chess.Player)">
            <summary>
            Main interface:get best move after evaluated by fuction Minmax Search and Pruning Search(Alpha-Beta-cut)
            </summary>
            <param name="board">current ChessBoard state</param>
            <param name="turn">"Who's side are we viewing from."></param>
            <returns>move_t</returns>
        </member>
        <member name="M:Chess.AI.MinMaxAB(Chess.ChessBoard,Chess.Player,System.Int32,System.Int32,System.Int32)">
            <summary>
            Minmax Search,include Alpha-Beta-cut(Pruning Search) 
            </summary>
            <param name="board">ChessBoard state</param>
            <param name="turn">who's turn</param>
            <param name="depth">search depth</param>
            <param name="alpha"></param>
            <param name="beta"></param>
            <returns></returns>
        </member>
        <member name="T:Chess.ChessBoard">
            <summary>
            Chess Board state
            </summary>
        </member>
        <member name="P:Chess.ChessBoard.Grid">
            <summary>
            square grid include rows(number:0-8) and columns(letter:a-h)
            </summary>
        </member>
        <member name="P:Chess.ChessBoard.Kings">
            <summary>
            Kings's position dictionary
            </summary>
        </member>
        <member name="P:Chess.ChessBoard.Pieces">
            <summary>
            Pieces's position list dictionary
            </summary>
        </member>
        <member name="P:Chess.ChessBoard.LastMove">
            <summary>
            Last move postion dictionary
            </summary>
        </member>
        <member name="M:Chess.ChessBoard.#ctor">
            <summary>
            init Chess Board
            </summary>
        </member>
        <member name="M:Chess.ChessBoard.#ctor(Chess.ChessBoard)">
            <summary>
            a clone ChessBoard
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:Chess.ChessBoard.SetInitialPlacement">
            <summary>
            SetInitialPlacement
            </summary>
        </member>
        <member name="M:Chess.ChessBoard.SetPiece(Chess.Piece,Chess.Player,System.Int32,System.Int32)">
            <summary>
            SetPiece
            </summary>
            <param name="piece"></param>
            <param name="player"></param>
            <param name="letter"></param>
            <param name="number"></param>
        </member>
        <member name="T:Chess.Chess">
            <summary>
            Chess class
            </summary>
        </member>
        <member name="P:Chess.Chess.Board">
            <summary>
            Chessboard
            </summary>
        </member>
        <member name="P:Chess.Chess.Turn">
            <summary>
            Who's turn
            </summary>
        </member>
        <member name="P:Chess.Chess.Selection">
            <summary>
            Selection position
            </summary>
        </member>
        <member name="M:Chess.Chess.#ctor(Chess.UIBoard,Chess.GameMode,System.Boolean)">
            <summary>
            Chess(UIBoard ui, GameMode gameMode= GameMode.BlackAuto, bool setupBoard = true)
            </summary>
            <param name="ui">UIBoard</param>
            <param name="gameMode">GameMode</param>
            <param name="setupBoard">true?false</param>
        </member>
        <member name="M:Chess.Chess.AISelect">
            <summary>
            AI select:This is important function, which call AI Thread and GetBestMove()
            </summary>
        </member>
        <member name="M:Chess.Chess.Select(Chess.position_t)">
            <summary>
            Select postion, IF first click THEN show possible moves.IF destination selection in legal one THEN MakeMove
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Chess.Chess.MakeMove(Chess.move_t)">
            <summary>
            Make Move and log the move's history
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Chess.Chess.switchPlayer">
            <summary>
            Toggle who's turn it is
            </summary>
        </member>
        <member name="M:Chess.Chess.detectCheckmate">
            <summary>
            Detects Checkmate, Stalemate or Draw conditions.
            </summary>
            <returns>True if no legal moves, or only kings left.</returns>
        </member>
        <member name="T:Chess.FrmAIsetting">
            <summary>
            AI setting UI:WinForm
            </summary>
        </member>
        <member name="M:Chess.FrmAIsetting.#ctor">
            <summary>
            AI setting UI
            </summary>
        </member>
        <member name="F:Chess.FrmAIsetting.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Chess.FrmAIsetting.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Chess.FrmAIsetting.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Chess.MainForm">
            <summary>
            MainForm : WinForm, UIBoard
            </summary>
            <summary>
            MainForm : WinForm, UIBoard
            </summary>
        </member>
        <member name="M:Chess.MainForm.Stop">
            <summary>
            Stop all current activity / games and reset everything.
            </summary>
        </member>
        <member name="M:Chess.MainForm.NewGame(Chess.GameMode)">
            <summary>
            Set up a new game for the specified number of players.
            </summary>
        </member>
        <member name="F:Chess.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Chess.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Chess.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Chess.Graphics">
            <summary>
            Graphics for MainForm(UI),load image of pieces and turn-indicator.
            </summary>
        </member>
        <member name="P:Chess.Graphics.Pieces">
            <summary>
            Pieces's image dictionary
            </summary>
        </member>
        <member name="P:Chess.Graphics.TurnIndicator">
            <summary>
            Who's turn indicator image dictionary
            </summary>
        </member>
        <member name="M:Chess.Graphics.#ctor(System.String)">
            <summary>
            Load image only once into a dictionary for drawing
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Chess.Graphics.LoadGraphics">
            <summary>
            Load the graphices only once into a dictionary for quicker drawing
            </summary>
        </member>
        <member name="T:Chess.LegalMoveSet">
            <summary>
            LegalMoveSet
            </summary>
        </member>
        <member name="M:Chess.LegalMoveSet.move(Chess.ChessBoard,Chess.move_t)">
            <summary>
            Performs all necessary steps to update the game state and move the pieces.
            </summary>
            <param name="b">The state of the game.</param>
            <param name="m">The desired move.</param>
            <returns>The new state of the game.</returns>
        </member>
        <member name="M:Chess.LegalMoveSet.hasMoves(Chess.ChessBoard,Chess.Player)">
            <summary>
            Determine if the provided player has any valid moves.
            </summary>
            <param name="b">The state of the game.</param>
            <param name="player">The player.</param>
            <returns>True if the player has moves.</returns>
        </member>
        <member name="M:Chess.LegalMoveSet.getPlayerMoves(Chess.ChessBoard,Chess.Player)">
            <summary>
            Get all legal moves for the player on the current board.
            </summary>
            <param name="b">The state of the game.</param>
            <param name="player">The player whose moves you want.</param>
            <returns>A 1-to-many dictionary of moves from one position to many</returns>
        </member>
        <member name="M:Chess.LegalMoveSet.getLegalMove(Chess.ChessBoard,Chess.position_t,System.Boolean)">
            <summary>
            Get any legal move from the current position on the provided board.
            </summary>
            <param name="board">The state of the game.</param>
            <param name="pos">The piece/position to check for valid moves.</param>
            <param name="verify_check">Whether or not to recurse and check if the current move puts you in check.</param>
            <returns>A list of positions the piece can move to.</returns>
        </member>
        <member name="M:Chess.LegalMoveSet.Slide(Chess.ChessBoard,Chess.Player,Chess.position_t,Chess.position_t)">
            <summary>
            Slide along the path steps until you hit something. Return path to point and if it ends attacking with the attack.
            </summary>
        </member>
        <member name="M:Chess.LegalMoveSet.isCheck(Chess.ChessBoard,Chess.Player)">
            <summary>
            Checks to see if the king for a player is in check. This function
            works by pretending the king is each of the different board pieces and seeing if it can attack
            any of the same type of price from its current position.
            </summary>
            <param name="b">Board state</param>
            <param name="king">the currnet player</param>
            <returns>Is in check</returns>
        </member>
        <member name="M:Chess.LegalMoveSet.isEnPassant(Chess.ChessBoard,Chess.move_t)">
            <summary>
            isEnPassant
            </summary>
            <param name="b"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Chess.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Chess.Piece">
            <summary>
            Piece:Pawn,Rook,Knight,Bishop,Queen,King
            </summary>
        </member>
        <member name="T:Chess.Player">
            <summary>
            Player:BLACK,WHITE
            </summary>
        </member>
        <member name="T:Chess.GameMode">
            <summary>
            GameMode：NotStart，BothManual，WhiteAuto，BlackAuto,BothAuto。
            </summary>
        </member>
        <member name="T:Chess.position_t">
            <summary>
            position struct
            </summary>
        </member>
        <member name="F:Chess.position_t.letter">
            <summary>
            chess board file or column of grid
            </summary>
        </member>
        <member name="F:Chess.position_t.number">
            <summary>
            chess board rank or row of grid
            </summary>
        </member>
        <member name="T:Chess.piece_t">
            <summary>
            copy piece struct for last postion
            </summary>
        </member>
        <member name="T:Chess.move_t">
            <summary>
            move struct
            </summary>
        </member>
        <member name="T:Chess.UIBoard">
            <summary>
            UIBoard
            </summary>
        </member>
        <member name="T:Chess.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Chess.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Chess.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
    </members>
</doc>
